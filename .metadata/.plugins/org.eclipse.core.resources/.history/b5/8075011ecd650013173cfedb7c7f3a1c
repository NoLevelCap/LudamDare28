package com.nolevelcap.entity;

import java.awt.Rectangle;
import java.io.IOException;

import org.lwjgl.util.vector.Vector2f;

import com.nolevelcap.player.Physics;

import mdesl.graphics.SpriteBatch;
import mdesl.graphics.Texture;
import mdesl.graphics.TextureRegion;

public class Enemy {
		
		private Texture tileset;
		public TextureRegion[] texture;
		SpriteBatch draw;
		private long sinceLastMove, currentTime, lastTime;
		private float YVelocity;
		private float YAcceleration;
		private Vector2f location;
		Physics physics;
		private float ly, dy;
		private boolean inAir;
		
		public Enemy(SpriteBatch draw, Physics physics){
			this.draw = draw;
			this.physics = physics;
			try {
				tileset = new Texture(draw.getResource("Enemy/GreenSlime.png"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			initTexture();
			ly = location.y;
			dy = location.y;
		}
		
		public void Render(){
			draw.draw(texture[0], location.x, location.y, 128, 128);
		}
		
		public void Logic(){
			if (YVelocity > 0 || YVelocity < 0){
				System.out.println("Velocity"+YVelocity+" inAir"+inAir+" location.y"+location.y);
			System.out.println(location.y);
			}
			YAcceleration  = physics.getNewAcceleration(YAcceleration);
			
			YVelocity = physics.getVelocity(YVelocity, YAcceleration);
			
			dy = physics.getNewY(YVelocity, dy);
			
			Rectangle desiredRect = new Rectangle((int) location.x,(int) dy, 128, 128);
			
			for(int vno = 0; vno<= world.TileHeight-1; vno++){
				for(int lineno = 0; lineno<= world.WorldLength-1; lineno++){
					if(world.shift+lineno*world.Tiles[lineno][vno].width < 2000 && world.shift+lineno*world.Tiles[lineno][vno].width > -200){
						if(physics.checkForCollision(desiredRect, world.Tiles[lineno][vno].collisionBox)){
						//System.out.println("collision");
							colliding = true;
							YVelocity = 0;
							dy = ly;
						} 
					}
				}
			}
			
			ly = dy;
			location.y = dy;
		}
		
		public void Animation(){
			
		}
		
		public void initTexture(){
			this.texture = new TextureRegion[4];
			this.texture[0] = new TextureRegion(tileset, 0, 0, 32, 32);
			this.texture[1] = new TextureRegion(tileset, 32, 0, 32, 32);
			this.texture[2] = new TextureRegion(tileset, 64, 0, 32, 32);
			this.texture[3] = new TextureRegion(tileset, 96, 0, 32, 32);
		}
}
